{"ast":null,"code":"var _jsxFileName = \"/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Post/Create/Main.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState } from \"react\";\nimport Router from \"next/router\"; // Material UI\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\"; // Components\n\nimport UserCard from \"./UserCard\";\nimport Industry from \"./Industry\"; // Contexts\n\nimport { UserContext } from \"../../../contexts/UserContext\";\nimport { ModalContext } from \"../../../contexts/ModalContext\"; // Utils\n\nimport { createPost } from \"./utils/createPost\"; // Hooks\n\nimport useWidth from \"../../../hooks/useWidth\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    minHeight: \"50vh\",\n    marginTop: 20,\n    marginBottom: 10,\n    width: \"100%\",\n    overflowX: \"hidden\"\n  },\n  textField: {\n    width: \"17rem\",\n    marginTop: 20,\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  innerWrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    borderRadius: 10\n  },\n  button: {\n    marginTop: 45,\n    marginBottom: \"3rem\",\n    textTransform: \"none\",\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 10,\n    paddingRight: 10,\n    fontSize: 12,\n    width: \"100%\",\n    fontFamily: \"Open Sans, sans serif\"\n  }\n}));\n\nconst Main = () => {\n  const classes = useStyles();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: text,\n    1: setText\n  } = useState(\"\");\n  const {\n    0: tags,\n    1: setTags\n  } = useState([]);\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    setShowCreate\n  } = useContext(ModalContext);\n\n  const onSubmit = async text => {\n    setLoading(true);\n    let post = {\n      text: text,\n      author: {\n        _id: user._id,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        photo: user.photo\n      },\n      tags: tags\n    };\n    await createPost(post).then(response => {\n      console.log(response);\n\n      if (response.status === \"success\") {\n        setLoading(false);\n        Router.reload();\n      } else {\n        setLoading(false);\n      }\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.innerWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, __jsx(UserCard, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), __jsx(TextField, {\n    multiline: true,\n    rows: 4,\n    className: classes.textField,\n    variant: \"outlined\",\n    type: \"text\",\n    label: \"What's on your mind?\",\n    value: text,\n    onChange: e => setText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), __jsx(Industry, {\n    tags: tags,\n    setTags: setTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    disabled: text.length === 0,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => onSubmit(text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Create\")));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Post/Create/Main.js"],"names":["useContext","useState","Router","makeStyles","TextField","Button","UserCard","Industry","UserContext","ModalContext","createPost","useWidth","useStyles","theme","root","display","flexDirection","alignItems","minHeight","marginTop","marginBottom","width","overflowX","textField","flexGrow","flexShrink","innerWrapper","justifyContent","backgroundColor","borderRadius","button","textTransform","paddingTop","paddingBottom","paddingLeft","paddingRight","fontSize","fontFamily","Main","classes","loading","setLoading","text","setText","tags","setTags","user","setShowCreate","onSubmit","post","author","_id","firstname","lastname","photo","then","response","console","log","status","reload","e","target","value","length"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\";\nimport Router from \"next/router\";\n// Material UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n// Components\nimport UserCard from \"./UserCard\";\nimport Industry from \"./Industry\";\n// Contexts\nimport { UserContext } from \"../../../contexts/UserContext\";\nimport { ModalContext } from \"../../../contexts/ModalContext\";\n\n// Utils\nimport { createPost } from \"./utils/createPost\";\n// Hooks\nimport useWidth from \"../../../hooks/useWidth\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    minHeight: \"50vh\",\n    marginTop: 20,\n    marginBottom: 10,\n    width: \"100%\",\n    overflowX: \"hidden\",\n  },\n  textField: {\n    width: \"17rem\",\n    marginTop: 20,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  innerWrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    borderRadius: 10,\n  },\n  button: {\n    marginTop: 45,\n    marginBottom: \"3rem\",\n    textTransform: \"none\",\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 10,\n    paddingRight: 10,\n    fontSize: 12,\n    width: \"100%\",\n    fontFamily: \"Open Sans, sans serif\",\n  },\n}));\n\nconst Main = () => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [tags, setTags] = useState([]);\n  const { user } = useContext(UserContext);\n  const { setShowCreate } = useContext(ModalContext);\n\n  const onSubmit = async (text) => {\n    setLoading(true);\n\n    let post = {\n      text: text,\n      author: {\n        _id: user._id,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        photo: user.photo,\n      },\n      tags: tags,\n    };\n\n    await createPost(post).then((response) => {\n      console.log(response);\n      if (response.status === \"success\") {\n        setLoading(false);\n        Router.reload();\n      } else {\n        setLoading(false);\n      }\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.innerWrapper}>\n        <UserCard user={user} />\n        <TextField\n          multiline\n          rows={4}\n          className={classes.textField}\n          variant=\"outlined\"\n          type=\"text\"\n          label=\"What's on your mind?\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <Industry tags={tags} setTags={setTags} />\n        <Button\n          disabled={text.length === 0}\n          variant={\"contained\"}\n          color={\"primary\"}\n          className={classes.button}\n          onClick={() => onSubmit(text)}\n        >\n          Create\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}