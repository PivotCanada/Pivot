{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isEmpty, validateEmail } from \"../../../utils/validation/formatting\";\nimport { exists } from \"../../../utils/validation/verifyUserExists\";\nexport var validateLogin = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n    var errors, valid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            errors = {};\n            valid = true;\n\n            if (isEmpty(values.email)) {\n              errors.email = \"Required\";\n              valid = false;\n            }\n\n            if (isEmpty(values.email)) {\n              _context.next = 11;\n              break;\n            }\n\n            if (validateEmail(values.email)) {\n              _context.next = 9;\n              break;\n            }\n\n            errors.email = \"This Email is Not Valid\";\n            valid = false;\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return exists(values.email).then(function (response) {\n              if (!response.data) {\n                errors.email = \"User With This Email Does Not Exist\";\n                valid = false;\n              }\n            });\n\n          case 11:\n            if (isEmpty(values.password)) {\n              errors.password = \"Required\";\n              valid = false;\n            }\n\n            return _context.abrupt(\"return\", {\n              errors: errors,\n              valid: valid\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateLogin(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Login/utils/validateLogin.js"],"names":["isEmpty","validateEmail","exists","validateLogin","values","errors","valid","email","then","response","data","password"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,sCAAvC;AACA,SAASC,MAAT,QAAuB,4CAAvB;AAEA,OAAO,IAAMC,aAAa;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,MADuB,GACd,EADc;AAEvBC,YAAAA,KAFuB,GAEf,IAFe;;AAI3B,gBAAIN,OAAO,CAACI,MAAM,CAACG,KAAR,CAAX,EAA2B;AACzBF,cAAAA,MAAM,CAACE,KAAP,GAAe,UAAf;AACAD,cAAAA,KAAK,GAAG,KAAR;AACD;;AAP0B,gBAStBN,OAAO,CAACI,MAAM,CAACG,KAAR,CATe;AAAA;AAAA;AAAA;;AAAA,gBAUpBN,aAAa,CAACG,MAAM,CAACG,KAAR,CAVO;AAAA;AAAA;AAAA;;AAWvBF,YAAAA,MAAM,CAACE,KAAP,GAAe,yBAAf;AACAD,YAAAA,KAAK,GAAG,KAAR;AAZuB;AAAA;;AAAA;AAAA;AAAA,mBAcjBJ,MAAM,CAACE,MAAM,CAACG,KAAR,CAAN,CAAqBC,IAArB,CAA0B,UAACC,QAAD,EAAc;AAC5C,kBAAI,CAACA,QAAQ,CAACC,IAAd,EAAoB;AAClBL,gBAAAA,MAAM,CAACE,KAAP,GAAe,qCAAf;AACAD,gBAAAA,KAAK,GAAG,KAAR;AACD;AACF,aALK,CAdiB;;AAAA;AAuB3B,gBAAIN,OAAO,CAACI,MAAM,CAACO,QAAR,CAAX,EAA8B;AAC5BN,cAAAA,MAAM,CAACM,QAAP,GAAkB,UAAlB;AACAL,cAAAA,KAAK,GAAG,KAAR;AACD;;AA1B0B,6CA4BpB;AAAED,cAAAA,MAAM,EAANA,MAAF;AAAUC,cAAAA,KAAK,EAALA;AAAV,aA5BoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbH,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import { isEmpty, validateEmail } from \"../../../utils/validation/formatting\";\nimport { exists } from \"../../../utils/validation/verifyUserExists\";\n\nexport const validateLogin = async (values) => {\n  let errors = {};\n  let valid = true;\n\n  if (isEmpty(values.email)) {\n    errors.email = \"Required\";\n    valid = false;\n  }\n\n  if (!isEmpty(values.email)) {\n    if (!validateEmail(values.email)) {\n      errors.email = \"This Email is Not Valid\";\n      valid = false;\n    } else {\n      await exists(values.email).then((response) => {\n        if (!response.data) {\n          errors.email = \"User With This Email Does Not Exist\";\n          valid = false;\n        }\n      });\n    }\n  }\n\n  if (isEmpty(values.password)) {\n    errors.password = \"Required\";\n    valid = false;\n  }\n\n  return { errors, valid };\n};\n"]},"metadata":{},"sourceType":"module"}