{"ast":null,"code":"export const incrementForm = async (e, values, handleErrors, validation, setStep) => {\n  // NOTE : Wrap handleErrors function in async, to await data fetches, such as verfiying user does not exist, etc ...\n  let valid = await handleErrors(values, validation);\n\n  if (valid) {\n    setStep(step => step + 1);\n  }\n\n  return;\n};","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/utils/validation/incrementForm.js"],"names":["incrementForm","e","values","handleErrors","validation","setStep","valid","step"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,OAC3BC,CAD2B,EAE3BC,MAF2B,EAG3BC,YAH2B,EAI3BC,UAJ2B,EAK3BC,OAL2B,KAMxB;AACH;AACA,MAAIC,KAAK,GAAG,MAAMH,YAAY,CAACD,MAAD,EAASE,UAAT,CAA9B;;AACA,MAAIE,KAAJ,EAAW;AACTD,IAAAA,OAAO,CAAEE,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;;AACD;AACD,CAbM","sourcesContent":["export const incrementForm = async (\n  e,\n  values,\n  handleErrors,\n  validation,\n  setStep\n) => {\n  // NOTE : Wrap handleErrors function in async, to await data fetches, such as verfiying user does not exist, etc ...\n  let valid = await handleErrors(values, validation);\n  if (valid) {\n    setStep((step) => step + 1);\n  }\n  return;\n};\n"]},"metadata":{},"sourceType":"module"}