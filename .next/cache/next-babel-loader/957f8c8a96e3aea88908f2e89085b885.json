{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { exists } from \"./verifyUserExists\";\nimport { validateEmail, isEmpty, contains } from \"./formatting\";\nexport var validateCredentials = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n    var errors, valid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            errors = {};\n            valid = true;\n\n            if (isEmpty(values.email)) {\n              errors.email = \"Required\";\n              valid = false;\n            }\n\n            if (isEmpty(values.email)) {\n              _context.next = 11;\n              break;\n            }\n\n            if (validateEmail(values.email)) {\n              _context.next = 9;\n              break;\n            }\n\n            errors.email = \"This Email is Not Valid\";\n            valid = false;\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return exists(values.email).then(function (response) {\n              if (response.data) {\n                errors.email = \"This Email is Already in Use\";\n                valid = false;\n              }\n            });\n\n          case 11:\n            if (contains(values.password, \" \")) {\n              errors.password = \"Password Cannot Contain Spaces\";\n              valid = false;\n            }\n\n            if (isEmpty(values.password)) {\n              errors.password = \"Required\";\n              valid = false;\n            }\n\n            if (isEmpty(values.firstname)) {\n              errors.firstname = \"Required\";\n              valid = false;\n            }\n\n            if (isEmpty(values.lastname)) {\n              errors.lastname = \"Required\";\n              valid = false;\n            } // if (isEmpty(values.role)) {\n            //   errors.role = \"role required\";\n            //   valid = false;\n            // }\n\n\n            return _context.abrupt(\"return\", {\n              errors: errors,\n              valid: valid\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateCredentials(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/utils/validation/validateCredentialsV2.js"],"names":["exists","validateEmail","isEmpty","contains","validateCredentials","values","errors","valid","email","then","response","data","password","firstname","lastname"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,QAAjC,QAAiD,cAAjD;AAEA,OAAO,IAAMC,mBAAmB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,MAD6B,GACpB,EADoB;AAE7BC,YAAAA,KAF6B,GAErB,IAFqB;;AAIjC,gBAAIL,OAAO,CAACG,MAAM,CAACG,KAAR,CAAX,EAA2B;AACzBF,cAAAA,MAAM,CAACE,KAAP,GAAe,UAAf;AACAD,cAAAA,KAAK,GAAG,KAAR;AACD;;AAPgC,gBAS5BL,OAAO,CAACG,MAAM,CAACG,KAAR,CATqB;AAAA;AAAA;AAAA;;AAAA,gBAU1BP,aAAa,CAACI,MAAM,CAACG,KAAR,CAVa;AAAA;AAAA;AAAA;;AAW7BF,YAAAA,MAAM,CAACE,KAAP,GAAe,yBAAf;AACAD,YAAAA,KAAK,GAAG,KAAR;AAZ6B;AAAA;;AAAA;AAAA;AAAA,mBAcvBP,MAAM,CAACK,MAAM,CAACG,KAAR,CAAN,CAAqBC,IAArB,CAA0B,UAACC,QAAD,EAAc;AAC5C,kBAAIA,QAAQ,CAACC,IAAb,EAAmB;AACjBL,gBAAAA,MAAM,CAACE,KAAP,GAAe,8BAAf;AACAD,gBAAAA,KAAK,GAAG,KAAR;AACD;AACF,aALK,CAduB;;AAAA;AAuBjC,gBAAIJ,QAAQ,CAACE,MAAM,CAACO,QAAR,EAAkB,GAAlB,CAAZ,EAAoC;AAClCN,cAAAA,MAAM,CAACM,QAAP,GAAkB,gCAAlB;AACAL,cAAAA,KAAK,GAAG,KAAR;AACD;;AAED,gBAAIL,OAAO,CAACG,MAAM,CAACO,QAAR,CAAX,EAA8B;AAC5BN,cAAAA,MAAM,CAACM,QAAP,GAAkB,UAAlB;AACAL,cAAAA,KAAK,GAAG,KAAR;AACD;;AAED,gBAAIL,OAAO,CAACG,MAAM,CAACQ,SAAR,CAAX,EAA+B;AAC7BP,cAAAA,MAAM,CAACO,SAAP,GAAmB,UAAnB;AACAN,cAAAA,KAAK,GAAG,KAAR;AACD;;AAED,gBAAIL,OAAO,CAACG,MAAM,CAACS,QAAR,CAAX,EAA8B;AAC5BR,cAAAA,MAAM,CAACQ,QAAP,GAAkB,UAAlB;AACAP,cAAAA,KAAK,GAAG,KAAR;AACD,aAzCgC,CA2CjC;AACA;AACA;AACA;;;AA9CiC,6CAgD1B;AAAED,cAAAA,MAAM,EAANA,MAAF;AAAUC,cAAAA,KAAK,EAALA;AAAV,aAhD0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBH,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import { exists } from \"./verifyUserExists\";\nimport { validateEmail, isEmpty, contains } from \"./formatting\";\n\nexport const validateCredentials = async (values) => {\n  let errors = {};\n  let valid = true;\n\n  if (isEmpty(values.email)) {\n    errors.email = \"Required\";\n    valid = false;\n  }\n\n  if (!isEmpty(values.email)) {\n    if (!validateEmail(values.email)) {\n      errors.email = \"This Email is Not Valid\";\n      valid = false;\n    } else {\n      await exists(values.email).then((response) => {\n        if (response.data) {\n          errors.email = \"This Email is Already in Use\";\n          valid = false;\n        }\n      });\n    }\n  }\n\n  if (contains(values.password, \" \")) {\n    errors.password = \"Password Cannot Contain Spaces\";\n    valid = false;\n  }\n\n  if (isEmpty(values.password)) {\n    errors.password = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.firstname)) {\n    errors.firstname = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.lastname)) {\n    errors.lastname = \"Required\";\n    valid = false;\n  }\n\n  // if (isEmpty(values.role)) {\n  //   errors.role = \"role required\";\n  //   valid = false;\n  // }\n\n  return { errors, valid };\n};\n"]},"metadata":{},"sourceType":"module"}