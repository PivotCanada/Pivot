{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport var isEmpty = function isEmpty(string) {\n  return string === \"\" ? true : false;\n};\nexport var searchUsers = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(parameters) {\n    var count, url, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(parameters); // TODO : Error Handeling\n\n            count = 0;\n            url = \"https://pivotinfo.herokuapp.com/api/search/users?\";\n            Object.keys(parameters).forEach(function (key) {\n              console.log(key);\n\n              if (key === \"skills\") {\n                var skills = parameters[key];\n\n                if (skills.length > 0) {\n                  var query = \"&skills=\";\n\n                  var _iterator = _createForOfIteratorHelper(skills),\n                      _step;\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var skill = _step.value;\n\n                      if (skills.indexOf(skill) === skills.length - 1) {\n                        query += skill._id;\n                      } else {\n                        query += skill._id + \",\";\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  url += query;\n                }\n              } else {\n                if (!isEmpty(parameters[key])) {\n                  var _query = \"\".concat(key, \"=\").concat(parameters[key]);\n\n                  if (count > 0) {\n                    url += \"&\" + _query;\n                  } else {\n                    url += _query;\n                  }\n                }\n              }\n\n              ++count;\n            });\n            _context.next = 6;\n            return fetch(url);\n\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function searchUsers(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Home/utils/searchUsers.js"],"names":["isEmpty","string","searchUsers","parameters","console","log","count","url","Object","keys","forEach","key","skills","length","query","skill","indexOf","_id","fetch","res","json"],"mappings":";;;;;;;;;AAAA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAY;AACjC,SAAOA,MAAM,KAAK,EAAX,GAAgB,IAAhB,GAAuB,KAA9B;AACD,CAFM;AAIP,OAAO,IAAMC,WAAW;AAAA,sEAAG,iBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ,EADyB,CAGzB;;AAEIG,YAAAA,KALqB,GAKb,CALa;AAMrBC,YAAAA,GANqB,GAMf,mDANe;AAQzBC,YAAAA,MAAM,CAACC,IAAP,CAAYN,UAAZ,EAAwBO,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvCP,cAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;;AAEA,kBAAIA,GAAG,KAAK,QAAZ,EAAsB;AACpB,oBAAIC,MAAM,GAAGT,UAAU,CAACQ,GAAD,CAAvB;;AAEA,oBAAIC,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrB,sBAAIC,KAAK,GAAG,UAAZ;;AADqB,6DAGHF,MAHG;AAAA;;AAAA;AAGrB,wEAA0B;AAAA,0BAAjBG,KAAiB;;AACxB,0BAAIH,MAAM,CAACI,OAAP,CAAeD,KAAf,MAA0BH,MAAM,CAACC,MAAP,GAAgB,CAA9C,EAAiD;AAC/CC,wBAAAA,KAAK,IAAIC,KAAK,CAACE,GAAf;AACD,uBAFD,MAEO;AACLH,wBAAAA,KAAK,IAAIC,KAAK,CAACE,GAAN,GAAY,GAArB;AACD;AACF;AAToB;AAAA;AAAA;AAAA;AAAA;;AAWrBV,kBAAAA,GAAG,IAAIO,KAAP;AACD;AACF,eAhBD,MAgBO;AACL,oBAAI,CAACd,OAAO,CAACG,UAAU,CAACQ,GAAD,CAAX,CAAZ,EAA+B;AAC7B,sBAAIG,MAAK,aAAMH,GAAN,cAAaR,UAAU,CAACQ,GAAD,CAAvB,CAAT;;AAEA,sBAAIL,KAAK,GAAG,CAAZ,EAAe;AACbC,oBAAAA,GAAG,IAAI,MAAMO,MAAb;AACD,mBAFD,MAEO;AACLP,oBAAAA,GAAG,IAAIO,MAAP;AACD;AACF;AACF;;AAED,gBAAER,KAAF;AACD,aAhCD;AARyB;AAAA,mBA0CPY,KAAK,CAACX,GAAD,CA1CE;;AAAA;AA0CnBY,YAAAA,GA1CmB;AAAA;AAAA,mBA2CZA,GAAG,CAACC,IAAJ,EA3CY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXlB,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["export const isEmpty = (string) => {\n  return string === \"\" ? true : false;\n};\n\nexport const searchUsers = async (parameters) => {\n  console.log(parameters);\n\n  // TODO : Error Handeling\n\n  let count = 0;\n  let url = \"https://pivotinfo.herokuapp.com/api/search/users?\";\n\n  Object.keys(parameters).forEach((key) => {\n    console.log(key);\n\n    if (key === \"skills\") {\n      let skills = parameters[key];\n\n      if (skills.length > 0) {\n        let query = \"&skills=\";\n\n        for (var skill of skills) {\n          if (skills.indexOf(skill) === skills.length - 1) {\n            query += skill._id;\n          } else {\n            query += skill._id + \",\";\n          }\n        }\n\n        url += query;\n      }\n    } else {\n      if (!isEmpty(parameters[key])) {\n        let query = `${key}=${parameters[key]}`;\n\n        if (count > 0) {\n          url += \"&\" + query;\n        } else {\n          url += query;\n        }\n      }\n    }\n\n    ++count;\n  });\n\n  const res = await fetch(url);\n  return await res.json();\n};\n"]},"metadata":{},"sourceType":"module"}