{"ast":null,"code":"import { exists } from \"./verifyUserExists\";\nimport { validateEmail, isEmpty, contains } from \"./formatting\";\nexport const validateCredentials = async values => {\n  let errors = {};\n  let valid = true;\n\n  if (isEmpty(values.email)) {\n    errors.email = \"Required\";\n    valid = false;\n  }\n\n  if (!isEmpty(values.email)) {\n    if (!validateEmail(values.email)) {\n      errors.email = \"This Email is Not Valid\";\n      valid = false;\n    } else {\n      await exists(values.email).then(response => {\n        if (response.data) {\n          errors.email = \"This Email is Already in Use\";\n          valid = false;\n        }\n      });\n    }\n  } // if (contains(values.password, \" \")) {\n  //   errors.password = \"Password Cannot Contain Spaces\";\n  //   valid = false;\n  // }\n  // if (isEmpty(values.password)) {\n  //   errors.password = \"Required\";\n  //   valid = false;\n  // }\n\n\n  if (isEmpty(values.firstname)) {\n    errors.firstname = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.lastname)) {\n    errors.lastname = \"Required\";\n    valid = false;\n  } // if (isEmpty(values.role)) {\n  //   errors.role = \"role required\";\n  //   valid = false;\n  // }\n\n\n  return {\n    errors,\n    valid\n  };\n};","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/utils/validation/validateCredentials.js"],"names":["exists","validateEmail","isEmpty","contains","validateCredentials","values","errors","valid","email","then","response","data","firstname","lastname"],"mappings":"AAAA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,QAAjC,QAAiD,cAAjD;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,MAAP,IAAkB;AACnD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIL,OAAO,CAACG,MAAM,CAACG,KAAR,CAAX,EAA2B;AACzBF,IAAAA,MAAM,CAACE,KAAP,GAAe,UAAf;AACAD,IAAAA,KAAK,GAAG,KAAR;AACD;;AAED,MAAI,CAACL,OAAO,CAACG,MAAM,CAACG,KAAR,CAAZ,EAA4B;AAC1B,QAAI,CAACP,aAAa,CAACI,MAAM,CAACG,KAAR,CAAlB,EAAkC;AAChCF,MAAAA,MAAM,CAACE,KAAP,GAAe,yBAAf;AACAD,MAAAA,KAAK,GAAG,KAAR;AACD,KAHD,MAGO;AACL,YAAMP,MAAM,CAACK,MAAM,CAACG,KAAR,CAAN,CAAqBC,IAArB,CAA2BC,QAAD,IAAc;AAC5C,YAAIA,QAAQ,CAACC,IAAb,EAAmB;AACjBL,UAAAA,MAAM,CAACE,KAAP,GAAe,8BAAf;AACAD,UAAAA,KAAK,GAAG,KAAR;AACD;AACF,OALK,CAAN;AAMD;AACF,GArBkD,CAuBnD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,MAAIL,OAAO,CAACG,MAAM,CAACO,SAAR,CAAX,EAA+B;AAC7BN,IAAAA,MAAM,CAACM,SAAP,GAAmB,UAAnB;AACAL,IAAAA,KAAK,GAAG,KAAR;AACD;;AAED,MAAIL,OAAO,CAACG,MAAM,CAACQ,QAAR,CAAX,EAA8B;AAC5BP,IAAAA,MAAM,CAACO,QAAP,GAAkB,UAAlB;AACAN,IAAAA,KAAK,GAAG,KAAR;AACD,GAzCkD,CA2CnD;AACA;AACA;AACA;;;AAEA,SAAO;AAAED,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAP;AACD,CAjDM","sourcesContent":["import { exists } from \"./verifyUserExists\";\nimport { validateEmail, isEmpty, contains } from \"./formatting\";\n\nexport const validateCredentials = async (values) => {\n  let errors = {};\n  let valid = true;\n\n  if (isEmpty(values.email)) {\n    errors.email = \"Required\";\n    valid = false;\n  }\n\n  if (!isEmpty(values.email)) {\n    if (!validateEmail(values.email)) {\n      errors.email = \"This Email is Not Valid\";\n      valid = false;\n    } else {\n      await exists(values.email).then((response) => {\n        if (response.data) {\n          errors.email = \"This Email is Already in Use\";\n          valid = false;\n        }\n      });\n    }\n  }\n\n  // if (contains(values.password, \" \")) {\n  //   errors.password = \"Password Cannot Contain Spaces\";\n  //   valid = false;\n  // }\n\n  // if (isEmpty(values.password)) {\n  //   errors.password = \"Required\";\n  //   valid = false;\n  // }\n\n  if (isEmpty(values.firstname)) {\n    errors.firstname = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.lastname)) {\n    errors.lastname = \"Required\";\n    valid = false;\n  }\n\n  // if (isEmpty(values.role)) {\n  //   errors.role = \"role required\";\n  //   valid = false;\n  // }\n\n  return { errors, valid };\n};\n"]},"metadata":{},"sourceType":"module"}