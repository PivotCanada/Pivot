{"ast":null,"code":"export async function fetchCities(query) {\n  // NOTE : requests are made to the following API -> https://developers.teleport.org/api/\n  // TODO : Standardize fetch requests, with appropriate headers, etc ...\n  const res = await fetch(`https://api.teleport.org/api/cities/?search=${query}`, {\n    method: \"GET\"\n  });\n  return await res.json().then(response => {\n    const cities = [];\n    const results = response[\"_embedded\"][\"city:search-results\"];\n\n    for (var result of results) {\n      const city_name = result.matching_full_name;\n      const city_href = result._links[\"city:item\"].href;\n      const city = {\n        name: city_name,\n        href: city_href\n      };\n      cities.push(city);\n    }\n\n    return cities;\n  });\n}","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/utils/location/fetchCities.js"],"names":["fetchCities","query","res","fetch","method","json","then","response","cities","results","result","city_name","matching_full_name","city_href","_links","href","city","name","push"],"mappings":"AAAA,OAAO,eAAeA,WAAf,CAA2BC,KAA3B,EAAkC;AACvC;AACA;AAEA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,+CAA8CF,KAAM,EADhC,EAErB;AACEG,IAAAA,MAAM,EAAE;AADV,GAFqB,CAAvB;AAMA,SAAO,MAAMF,GAAG,CAACG,IAAJ,GAAWC,IAAX,CAAiBC,QAAD,IAAc;AACzC,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,OAAO,GAAGF,QAAQ,CAAC,WAAD,CAAR,CAAsB,qBAAtB,CAAhB;;AAEA,SAAK,IAAIG,MAAT,IAAmBD,OAAnB,EAA4B;AAC1B,YAAME,SAAS,GAAGD,MAAM,CAACE,kBAAzB;AACA,YAAMC,SAAS,GAAGH,MAAM,CAACI,MAAP,CAAc,WAAd,EAA2BC,IAA7C;AAEA,YAAMC,IAAI,GAAG;AACXC,QAAAA,IAAI,EAAEN,SADK;AAEXI,QAAAA,IAAI,EAAEF;AAFK,OAAb;AAKAL,MAAAA,MAAM,CAACU,IAAP,CAAYF,IAAZ;AACD;;AACD,WAAOR,MAAP;AACD,GAhBY,CAAb;AAiBD","sourcesContent":["export async function fetchCities(query) {\n  // NOTE : requests are made to the following API -> https://developers.teleport.org/api/\n  // TODO : Standardize fetch requests, with appropriate headers, etc ...\n\n  const res = await fetch(\n    `https://api.teleport.org/api/cities/?search=${query}`,\n    {\n      method: \"GET\",\n    }\n  );\n  return await res.json().then((response) => {\n    const cities = [];\n    const results = response[\"_embedded\"][\"city:search-results\"];\n\n    for (var result of results) {\n      const city_name = result.matching_full_name;\n      const city_href = result._links[\"city:item\"].href;\n\n      const city = {\n        name: city_name,\n        href: city_href,\n      };\n\n      cities.push(city);\n    }\n    return cities;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}