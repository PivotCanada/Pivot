{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Edit/Location.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { fetchCities } from \"../../utils/location/fetchCities\"; // import { validateLocation } from \"../../../utils/validation/validateLocation\";\n// import { incrementForm } from \"../../../utils/validation/incrementForm\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    textField: {\n      width: \"17rem\",\n      marginBottom: 30\n    }\n  };\n});\n\nfunction Location(_ref) {\n  _s();\n\n  var _this = this;\n\n  var values = _ref.values,\n      handleChange = _ref.handleChange,\n      errors = _ref.errors;\n\n  var _useState = useState(\"\"),\n      search = _useState[0],\n      setSearch = _useState[1];\n\n  var _useState2 = useState([]),\n      results = _useState2[0],\n      setResults = _useState2[1];\n\n  var classes = useStyles();\n  useEffect(function () {// console.log(results);\n  }, [errors]);\n  return __jsx(Autocomplete, {\n    id: \"combo-box-demo\",\n    options: results,\n    onChange: function onChange(e, newValue) {\n      // Create a new value from the user input\n      if (newValue !== null) {\n        handleChange(\"location\", newValue.name);\n        console.log(newValue);\n      } else {\n        handleChange(\"location\", \"\");\n      }\n    },\n    getOptionLabel: function getOptionLabel(city) {\n      return city.name;\n    } // TODO : Change style ...\n    ,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        onChange: function onChange(e) {\n          e.preventDefault();\n          setSearch(e.target.value);\n\n          if (e.target.value.length > 2) {\n            fetchCities(e.target.value).then(function (response) {\n              setResults(response);\n            });\n          } else {\n            setResults([]);\n          }\n        },\n        className: classes.textField,\n        label: \"City\",\n        error: errors.location ? true : false,\n        helperText: errors.location,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(Location, \"1ytbe1lnvKDqKy7zpmxNnOhKrV4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Edit/Location.js"],"names":["useState","useEffect","fetchCities","makeStyles","TextField","Autocomplete","useStyles","theme","textField","width","marginBottom","Location","values","handleChange","errors","search","setSearch","results","setResults","classes","e","newValue","name","console","log","city","params","preventDefault","target","value","length","then","response","location"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kCAA5B,C,CACA;AACA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,IAAMC,SAAS,GAAGH,UAAU,CAAC,UAACI,KAAD;AAAA,SAAY;AACvCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,OADE;AAETC,MAAAA,YAAY,EAAE;AAFL;AAD4B,GAAZ;AAAA,CAAD,CAA5B;;AAOA,SAASC,QAAT,OAKG;AAAA;;AAAA;;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,YAGC,QAHDA,YAGC;AAAA,MADDC,MACC,QADDA,MACC;;AAAA,kBAC2Bd,QAAQ,CAAC,EAAD,CADnC;AAAA,MACMe,MADN;AAAA,MACcC,SADd;;AAAA,mBAE6BhB,QAAQ,CAAC,EAAD,CAFrC;AAAA,MAEMiB,OAFN;AAAA,MAEeC,UAFf;;AAGD,MAAMC,OAAO,GAAGb,SAAS,EAAzB;AAEAL,EAAAA,SAAS,CAAC,YAAM,CACd;AACD,GAFQ,EAEN,CAACa,MAAD,CAFM,CAAT;AAIA,SACE,MAAC,YAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,QAAQ,EAAE,kBAACG,CAAD,EAAIC,QAAJ,EAAiB;AACzB;AACA,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBR,QAAAA,YAAY,CAAC,UAAD,EAAaQ,QAAQ,CAACC,IAAtB,CAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,OAHD,MAGO;AACLR,QAAAA,YAAY,CAAC,UAAD,EAAa,EAAb,CAAZ;AACD;AACF,KAXH;AAYE,IAAA,cAAc,EAAE,wBAACY,IAAD;AAAA,aAAUA,IAAI,CAACH,IAAf;AAAA,KAZlB,CAaE;AAbF;AAcE,IAAA,WAAW,EAAE,qBAACI,MAAD;AAAA,aACX,MAAC,SAAD,eACMA,MADN;AAEE,QAAA,QAAQ,EAAE,kBAACN,CAAD,EAAO;AACfA,UAAAA,CAAC,CAACO,cAAF;AACAX,UAAAA,SAAS,CAACI,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAT;;AACA,cAAIT,CAAC,CAACQ,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B5B,YAAAA,WAAW,CAACkB,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAX,CAA4BE,IAA5B,CAAiC,UAACC,QAAD,EAAc;AAC7Cd,cAAAA,UAAU,CAACc,QAAD,CAAV;AACD,aAFD;AAGD,WAJD,MAIO;AACLd,YAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,SAZH;AAaE,QAAA,SAAS,EAAEC,OAAO,CAACX,SAbrB;AAcE,QAAA,KAAK,EAAE,MAdT;AAeE,QAAA,KAAK,EAAEM,MAAM,CAACmB,QAAP,GAAkB,IAAlB,GAAyB,KAflC;AAgBE,QAAA,UAAU,EAAEnB,MAAM,CAACmB,QAhBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAqCD;;GAnDQtB,Q;UAQSL,S;;;KARTK,Q;AAqDT,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { fetchCities } from \"../../utils/location/fetchCities\";\n// import { validateLocation } from \"../../../utils/validation/validateLocation\";\n// import { incrementForm } from \"../../../utils/validation/incrementForm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: \"17rem\",\n    marginBottom: 30,\n  },\n}));\n\nfunction Location({\n  values,\n  handleChange,\n\n  errors,\n}) {\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const classes = useStyles();\n\n  useEffect(() => {\n    // console.log(results);\n  }, [errors]);\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      options={results}\n      onChange={(e, newValue) => {\n        // Create a new value from the user input\n        if (newValue !== null) {\n          handleChange(\"location\", newValue.name);\n          console.log(newValue);\n        } else {\n          handleChange(\"location\", \"\");\n        }\n      }}\n      getOptionLabel={(city) => city.name}\n      // TODO : Change style ...\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          onChange={(e) => {\n            e.preventDefault();\n            setSearch(e.target.value);\n            if (e.target.value.length > 2) {\n              fetchCities(e.target.value).then((response) => {\n                setResults(response);\n              });\n            } else {\n              setResults([]);\n            }\n          }}\n          className={classes.textField}\n          label={\"City\"}\n          error={errors.location ? true : false}\n          helperText={errors.location}\n        />\n      )}\n    />\n  );\n}\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}