{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\"; // NOTE : Generate Blank Errors Object ...\n\nvar createErrors = function createErrors(initialValues) {\n  var errors = {};\n\n  for (var key in initialValues) {\n    errors[key] = \"\";\n  }\n\n  return errors;\n};\n\nexport var useForm = function useForm(initialValues) {\n  _s();\n\n  var _useState = useState(initialValues),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useState2 = useState(createErrors(initialValues)),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(1),\n      step = _useState3[0],\n      setStep = _useState3[1];\n\n  var _useState4 = useState(false),\n      submitting = _useState4[0],\n      setSubmitting = _useState4[1];\n\n  var handleChange = function handleChange(e) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var handleDirectChange = function handleDirectChange(name, value) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, value)));\n  }; // NOTE : Wrap handleErrors function in async, to await data fetches, such as verfiying user does not exist, etc ...\n\n\n  var handleErrors = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, validation) {\n      var _yield$validation, errors, valid;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return validation(values);\n\n            case 2:\n              _yield$validation = _context.sent;\n              errors = _yield$validation.errors;\n              valid = _yield$validation.valid;\n              setErrors(errors);\n              return _context.abrupt(\"return\", valid);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleErrors(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    values: values,\n    step: step,\n    errors: errors,\n    submitting: submitting,\n    setStep: setStep,\n    handleChange: handleChange,\n    handleDirectChange: handleDirectChange,\n    handleErrors: handleErrors,\n    setSubmitting: setSubmitting\n  };\n};\n\n_s(useForm, \"QXSbyCUU3cAnK09OESN5MXt2s6c=\");","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/hooks/useForm.js"],"names":["useState","createErrors","initialValues","errors","key","useForm","values","setValues","setErrors","step","setStep","submitting","setSubmitting","handleChange","e","target","name","value","handleDirectChange","handleErrors","validation","valid"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAmB;AACtC,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAT,IAAgBF,aAAhB,EAA+B;AAC7BC,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,EAAd;AACD;;AACD,SAAOD,MAAP;AACD,CAND;;AAQA,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACH,aAAD,EAAmB;AAAA;;AAAA,kBACZF,QAAQ,CAACE,aAAD,CADI;AAAA,MACjCI,MADiC;AAAA,MACzBC,SADyB;;AAAA,mBAEZP,QAAQ,CAACC,YAAY,CAACC,aAAD,CAAb,CAFI;AAAA,MAEjCC,MAFiC;AAAA,MAEzBK,SAFyB;;AAAA,mBAGhBR,QAAQ,CAAC,CAAD,CAHQ;AAAA,MAGjCS,IAHiC;AAAA,MAG3BC,OAH2B;;AAAA,mBAIJV,QAAQ,CAAC,KAAD,CAJJ;AAAA,MAIjCW,UAJiC;AAAA,MAIrBC,aAJqB;;AAMxC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAO;AAC1BP,IAAAA,SAAS,iCACJD,MADI,2BAENQ,CAAC,CAACC,MAAF,CAASC,IAFH,EAEUF,CAAC,CAACC,MAAF,CAASE,KAFnB,GAAT;AAID,GALD;;AAOA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,IAAD,EAAOC,KAAP,EAAiB;AAC1CV,IAAAA,SAAS,iCACJD,MADI,2BAENU,IAFM,EAECC,KAFD,GAAT;AAID,GALD,CAbwC,CAoBxC;;;AACA,MAAME,YAAY;AAAA,wEAAG,iBAAOb,MAAP,EAAec,UAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACaA,UAAU,CAACd,MAAD,CADvB;;AAAA;AAAA;AACXH,cAAAA,MADW,qBACXA,MADW;AACHkB,cAAAA,KADG,qBACHA,KADG;AAEnBb,cAAAA,SAAS,CAACL,MAAD,CAAT;AAFmB,+CAGZkB,KAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZF,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAMA,SAAO;AACLb,IAAAA,MAAM,EAANA,MADK;AAELG,IAAAA,IAAI,EAAJA,IAFK;AAGLN,IAAAA,MAAM,EAANA,MAHK;AAILQ,IAAAA,UAAU,EAAVA,UAJK;AAKLD,IAAAA,OAAO,EAAPA,OALK;AAMLG,IAAAA,YAAY,EAAZA,YANK;AAOLK,IAAAA,kBAAkB,EAAlBA,kBAPK;AAQLC,IAAAA,YAAY,EAAZA,YARK;AASLP,IAAAA,aAAa,EAAbA;AATK,GAAP;AAWD,CAtCM;;GAAMP,O","sourcesContent":["import { useState } from \"react\";\n\n// NOTE : Generate Blank Errors Object ...\n\nconst createErrors = (initialValues) => {\n  let errors = {};\n  for (var key in initialValues) {\n    errors[key] = \"\";\n  }\n  return errors;\n};\n\nexport const useForm = (initialValues) => {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState(createErrors(initialValues));\n  const [step, setStep] = useState(1);\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleChange = (e) => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleDirectChange = (name, value) => {\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  // NOTE : Wrap handleErrors function in async, to await data fetches, such as verfiying user does not exist, etc ...\n  const handleErrors = async (values, validation) => {\n    const { errors, valid } = await validation(values);\n    setErrors(errors);\n    return valid;\n  };\n\n  return {\n    values,\n    step,\n    errors,\n    submitting,\n    setStep,\n    handleChange,\n    handleDirectChange,\n    handleErrors,\n    setSubmitting,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}