{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var incrementForm = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e, values, handleErrors, validation, setStep) {\n    var valid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return handleErrors(values, validation);\n\n          case 2:\n            valid = _context.sent;\n\n            if (valid) {\n              setStep(function (step) {\n                return step + 1;\n              });\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function incrementForm(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/utils/validation/incrementForm.js"],"names":["incrementForm","e","values","handleErrors","validation","setStep","valid","step"],"mappings":";;AAAA,OAAO,IAAMA,aAAa;AAAA,sEAAG,iBAC3BC,CAD2B,EAE3BC,MAF2B,EAG3BC,YAH2B,EAI3BC,UAJ2B,EAK3BC,OAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQTF,YAAY,CAACD,MAAD,EAASE,UAAT,CARH;;AAAA;AAQvBE,YAAAA,KARuB;;AAS3B,gBAAIA,KAAJ,EAAW;AACTD,cAAAA,OAAO,CAAC,UAACE,IAAD;AAAA,uBAAUA,IAAI,GAAG,CAAjB;AAAA,eAAD,CAAP;AACD;;AAX0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbP,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["export const incrementForm = async (\n  e,\n  values,\n  handleErrors,\n  validation,\n  setStep\n) => {\n  // NOTE : Wrap handleErrors function in async, to await data fetches, such as verfiying user does not exist, etc ...\n  let valid = await handleErrors(values, validation);\n  if (valid) {\n    setStep((step) => step + 1);\n  }\n  return;\n};\n"]},"metadata":{},"sourceType":"module"}