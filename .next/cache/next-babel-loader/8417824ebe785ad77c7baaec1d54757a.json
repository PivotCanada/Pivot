{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nvar useWitdh = function useWitdh() {\n  _s();\n\n  // save current window width in the state object\n  var _useState = useState(0),\n      width = _useState[0],\n      setWidth = _useState[1];\n\n  var _useState2 = useState(false),\n      changing = _useState2[0],\n      setChanging = _useState2[1]; // in this case useEffect will execute only once because\n  // it does not have any dependencies.\n\n\n  useEffect(function () {\n    var timeoutId = null;\n\n    var resizeListener = function resizeListener() {\n      setChanging(true); // prevent execution of previous setTimeout\n\n      clearTimeout(timeoutId); // change width from the state object after 150 milliseconds\n\n      timeoutId = setTimeout(function () {\n        setWidth(window.innerWidth);\n        setChanging(false);\n      }, 50);\n    };\n\n    window.addEventListener(\"resize\", resizeListener); // clean up function\n\n    return function () {\n      // remove resize listener\n      window.removeEventListener(\"resize\", resizeListener);\n    };\n  }, []);\n  return {\n    width: width,\n    setWidth: setWidth,\n    changing: changing\n  };\n};\n\n_s(useWitdh, \"0R+0eSxmL0h40afV/t1OdYB8sgo=\");\n\nexport default useWitdh;","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/hooks/useWidth.js"],"names":["useState","useEffect","useWitdh","width","setWidth","changing","setChanging","timeoutId","resizeListener","clearTimeout","setTimeout","window","innerWidth","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AACrB;AADqB,kBAEGF,QAAQ,CAAC,CAAD,CAFX;AAAA,MAEhBG,KAFgB;AAAA,MAETC,QAFS;;AAAA,mBAGSJ,QAAQ,CAAC,KAAD,CAHjB;AAAA,MAGhBK,QAHgB;AAAA,MAGNC,WAHM,kBAKrB;AACA;;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,SAAS,GAAG,IAAhB;;AAEA,QAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BF,MAAAA,WAAW,CAAC,IAAD,CAAX,CAD2B,CAE3B;;AACAG,MAAAA,YAAY,CAACF,SAAD,CAAZ,CAH2B,CAI3B;;AACAA,MAAAA,SAAS,GAAGG,UAAU,CAAC,YAAM;AAC3BN,QAAAA,QAAQ,CAACO,MAAM,CAACC,UAAR,CAAR;AACAN,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD,OAHqB,EAGnB,EAHmB,CAAtB;AAID,KATD;;AAWAK,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCL,cAAlC,EAdc,CAgBd;;AACA,WAAO,YAAM;AACX;AACAG,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCN,cAArC;AACD,KAHD;AAID,GArBQ,EAqBN,EArBM,CAAT;AAuBA,SAAO;AAAEL,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,QAAQ,EAARA,QAAT;AAAmBC,IAAAA,QAAQ,EAARA;AAAnB,GAAP;AACD,CA/BD;;GAAMH,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useWitdh = () => {\n  // save current window width in the state object\n  let [width, setWidth] = useState(0);\n  let [changing, setChanging] = useState(false);\n\n  // in this case useEffect will execute only once because\n  // it does not have any dependencies.\n  useEffect(() => {\n    let timeoutId = null;\n\n    const resizeListener = () => {\n      setChanging(true);\n      // prevent execution of previous setTimeout\n      clearTimeout(timeoutId);\n      // change width from the state object after 150 milliseconds\n      timeoutId = setTimeout(() => {\n        setWidth(window.innerWidth);\n        setChanging(false);\n      }, 50);\n    };\n\n    window.addEventListener(\"resize\", resizeListener);\n\n    // clean up function\n    return () => {\n      // remove resize listener\n      window.removeEventListener(\"resize\", resizeListener);\n    };\n  }, []);\n\n  return { width, setWidth, changing };\n};\n\nexport default useWitdh;\n"]},"metadata":{},"sourceType":"module"}