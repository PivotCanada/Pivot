{"ast":null,"code":"import Cookie from \"js-cookie\";\nimport Router from \"next/router\";\nimport validateToken from \"../utils/authentication/validateToken\";\nimport fetchUser from \"../utils/general/fetchUser\";\n\nfunction useValidate(setUser, setAuthenticated, setLoading) {\n  const validateSession = async () => {\n    setLoading(true);\n    let token = Cookie.get(\"token\");\n\n    if (token !== undefined) {\n      await validateToken(token).then(async response => {\n        console.log(response);\n        status = response.status;\n\n        if (status === \"success\") {\n          await fetchUser(response.data.userId).then(response => {\n            setUser(response.data);\n            setAuthenticated(true);\n            setLoading(false);\n          });\n        } else {\n          setUser(null);\n          setAuthenticated(false);\n          setLoading(false);\n          Cookie.remove(\"token\");\n        }\n      });\n    } else {\n      setUser(null);\n      setAuthenticated(false);\n      setLoading(false);\n    }\n  };\n\n  return {\n    validateSession\n  };\n}\n\nexport default useValidate;","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/hooks/useValidate.js"],"names":["Cookie","Router","validateToken","fetchUser","useValidate","setUser","setAuthenticated","setLoading","validateSession","token","get","undefined","then","response","console","log","status","data","userId","remove"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,gBAA9B,EAAgDC,UAAhD,EAA4D;AAC1D,QAAMC,eAAe,GAAG,YAAY;AAClCD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAIE,KAAK,GAAGT,MAAM,CAACU,GAAP,CAAW,OAAX,CAAZ;;AACA,QAAID,KAAK,KAAKE,SAAd,EAAyB;AACvB,YAAMT,aAAa,CAACO,KAAD,CAAb,CAAqBG,IAArB,CAA0B,MAAOC,QAAP,IAAoB;AAClDC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,QAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAlB;;AACA,YAAIA,MAAM,KAAK,SAAf,EAA0B;AACxB,gBAAMb,SAAS,CAACU,QAAQ,CAACI,IAAT,CAAcC,MAAf,CAAT,CAAgCN,IAAhC,CAAsCC,QAAD,IAAc;AACvDR,YAAAA,OAAO,CAACQ,QAAQ,CAACI,IAAV,CAAP;AACAX,YAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAC,YAAAA,UAAU,CAAC,KAAD,CAAV;AACD,WAJK,CAAN;AAKD,SAND,MAMO;AACLF,UAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,UAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAC,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAP,UAAAA,MAAM,CAACmB,MAAP,CAAc,OAAd;AACD;AACF,OAfK,CAAN;AAgBD,KAjBD,MAiBO;AACLd,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAzBD;;AA2BA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD;;AAED,eAAeJ,WAAf","sourcesContent":["import Cookie from \"js-cookie\";\nimport Router from \"next/router\";\nimport validateToken from \"../utils/authentication/validateToken\";\nimport fetchUser from \"../utils/general/fetchUser\";\n\nfunction useValidate(setUser, setAuthenticated, setLoading) {\n  const validateSession = async () => {\n    setLoading(true);\n    let token = Cookie.get(\"token\");\n    if (token !== undefined) {\n      await validateToken(token).then(async (response) => {\n        console.log(response);\n        status = response.status;\n        if (status === \"success\") {\n          await fetchUser(response.data.userId).then((response) => {\n            setUser(response.data);\n            setAuthenticated(true);\n            setLoading(false);\n          });\n        } else {\n          setUser(null);\n          setAuthenticated(false);\n          setLoading(false);\n          Cookie.remove(\"token\");\n        }\n      });\n    } else {\n      setUser(null);\n      setAuthenticated(false);\n      setLoading(false);\n    }\n  };\n\n  return { validateSession };\n}\n\nexport default useValidate;\n"]},"metadata":{},"sourceType":"module"}