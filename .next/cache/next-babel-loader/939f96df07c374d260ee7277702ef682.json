{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useWitdh = () => {\n  // save current window width in the state object\n  let {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  let {\n    0: changing,\n    1: setChanging\n  } = useState(false); // in this case useEffect will execute only once because\n  // it does not have any dependencies.\n\n  useEffect(() => {\n    let timeoutId = null;\n\n    const resizeListener = () => {\n      setChanging(true); // prevent execution of previous setTimeout\n\n      clearTimeout(timeoutId); // change width from the state object after 150 milliseconds\n\n      timeoutId = setTimeout(() => {\n        setWidth(window.innerWidth);\n        setChanging(false);\n      }, 50);\n    };\n\n    window.addEventListener(\"resize\", resizeListener); // clean up function\n\n    return () => {\n      // remove resize listener\n      window.removeEventListener(\"resize\", resizeListener);\n    };\n  }, []);\n  return {\n    width,\n    setWidth,\n    changing\n  };\n};\n\nexport default useWitdh;","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/hooks/useWidth.js"],"names":["useState","useEffect","useWitdh","width","setWidth","changing","setChanging","timeoutId","resizeListener","clearTimeout","setTimeout","window","innerWidth","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB;AACA,MAAI;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,MAAI;AAAA,OAACK,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,KAAD,CAAtC,CAHqB,CAKrB;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,SAAS,GAAG,IAAhB;;AAEA,UAAMC,cAAc,GAAG,MAAM;AAC3BF,MAAAA,WAAW,CAAC,IAAD,CAAX,CAD2B,CAE3B;;AACAG,MAAAA,YAAY,CAACF,SAAD,CAAZ,CAH2B,CAI3B;;AACAA,MAAAA,SAAS,GAAGG,UAAU,CAAC,MAAM;AAC3BN,QAAAA,QAAQ,CAACO,MAAM,CAACC,UAAR,CAAR;AACAN,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD,OAHqB,EAGnB,EAHmB,CAAtB;AAID,KATD;;AAWAK,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCL,cAAlC,EAdc,CAgBd;;AACA,WAAO,MAAM;AACX;AACAG,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCN,cAArC;AACD,KAHD;AAID,GArBQ,EAqBN,EArBM,CAAT;AAuBA,SAAO;AAAEL,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAP;AACD,CA/BD;;AAiCA,eAAeH,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useWitdh = () => {\n  // save current window width in the state object\n  let [width, setWidth] = useState(0);\n  let [changing, setChanging] = useState(false);\n\n  // in this case useEffect will execute only once because\n  // it does not have any dependencies.\n  useEffect(() => {\n    let timeoutId = null;\n\n    const resizeListener = () => {\n      setChanging(true);\n      // prevent execution of previous setTimeout\n      clearTimeout(timeoutId);\n      // change width from the state object after 150 milliseconds\n      timeoutId = setTimeout(() => {\n        setWidth(window.innerWidth);\n        setChanging(false);\n      }, 50);\n    };\n\n    window.addEventListener(\"resize\", resizeListener);\n\n    // clean up function\n    return () => {\n      // remove resize listener\n      window.removeEventListener(\"resize\", resizeListener);\n    };\n  }, []);\n\n  return { width, setWidth, changing };\n};\n\nexport default useWitdh;\n"]},"metadata":{},"sourceType":"module"}