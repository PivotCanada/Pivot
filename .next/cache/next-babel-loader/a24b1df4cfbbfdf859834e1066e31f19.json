{"ast":null,"code":"var _jsxFileName = \"/Users/dalyanparker/Programming/Applications/pivot-front-end/components/SignUpV2/Location.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useEffect } from \"react\";\nimport { fetchCities } from \"../../utils/location/fetchCities\"; // import { validateLocation } from \"../../../utils/validation/validateLocation\";\n// import { incrementForm } from \"../../../utils/validation/incrementForm\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    width: \"17rem\",\n    marginBottom: 30\n  }\n}));\n\nfunction Location({\n  values,\n  handleChange,\n  errors\n}) {\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: results,\n    1: setResults\n  } = useState([]);\n  const classes = useStyles();\n  useEffect(() => {// console.log(results);\n  }, [errors]);\n  return __jsx(Autocomplete, {\n    id: \"combo-box-demo\",\n    options: results,\n    onChange: (e, newValue) => {\n      // Create a new value from the user input\n      if (newValue !== null) {\n        handleChange(\"location\", newValue.name);\n        console.log(newValue);\n      } else {\n        handleChange(\"location\", \"\");\n      }\n    },\n    getOptionLabel: city => city.name // TODO : Change style ...\n    ,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      onChange: e => {\n        e.preventDefault();\n        setSearch(e.target.value);\n\n        if (e.target.value.length > 2) {\n          fetchCities(e.target.value).then(response => {\n            setResults(response);\n          });\n        } else {\n          setResults([]);\n        }\n      },\n      className: classes.textField,\n      label: \"City\",\n      error: errors.location ? true : false,\n      helperText: errors.location,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default Location;","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/SignUpV2/Location.js"],"names":["useState","useEffect","fetchCities","makeStyles","TextField","Autocomplete","useStyles","theme","textField","width","marginBottom","Location","values","handleChange","errors","search","setSearch","results","setResults","classes","e","newValue","name","console","log","city","params","preventDefault","target","value","length","then","response","location"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kCAA5B,C,CACA;AACA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAD,KAAY;AACvCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,OADE;AAETC,IAAAA,YAAY,EAAE;AAFL;AAD4B,CAAZ,CAAD,CAA5B;;AAOA,SAASC,QAAT,CAAkB;AAChBC,EAAAA,MADgB;AAEhBC,EAAAA,YAFgB;AAIhBC,EAAAA;AAJgB,CAAlB,EAKG;AACD,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACiB,OAAD;AAAA,OAAUC;AAAV,MAAwBlB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMmB,OAAO,GAAGb,SAAS,EAAzB;AAEAL,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,CAACa,MAAD,CAFM,CAAT;AAIA,SACE,MAAC,YAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,QAAQ,EAAE,CAACG,CAAD,EAAIC,QAAJ,KAAiB;AACzB;AACA,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBR,QAAAA,YAAY,CAAC,UAAD,EAAaQ,QAAQ,CAACC,IAAtB,CAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,OAHD,MAGO;AACLR,QAAAA,YAAY,CAAC,UAAD,EAAa,EAAb,CAAZ;AACD;AACF,KAXH;AAYE,IAAA,cAAc,EAAGY,IAAD,IAAUA,IAAI,CAACH,IAZjC,CAaE;AAbF;AAcE,IAAA,WAAW,EAAGI,MAAD,IACX,MAAC,SAAD,eACMA,MADN;AAEE,MAAA,QAAQ,EAAGN,CAAD,IAAO;AACfA,QAAAA,CAAC,CAACO,cAAF;AACAX,QAAAA,SAAS,CAACI,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAT;;AACA,YAAIT,CAAC,CAACQ,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B5B,UAAAA,WAAW,CAACkB,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAX,CAA4BE,IAA5B,CAAkCC,QAAD,IAAc;AAC7Cd,YAAAA,UAAU,CAACc,QAAD,CAAV;AACD,WAFD;AAGD,SAJD,MAIO;AACLd,UAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,OAZH;AAaE,MAAA,SAAS,EAAEC,OAAO,CAACX,SAbrB;AAcE,MAAA,KAAK,EAAE,MAdT;AAeE,MAAA,KAAK,EAAEM,MAAM,CAACmB,QAAP,GAAkB,IAAlB,GAAyB,KAflC;AAgBE,MAAA,UAAU,EAAEnB,MAAM,CAACmB,QAhBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAqCD;;AAED,eAAetB,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { fetchCities } from \"../../utils/location/fetchCities\";\n// import { validateLocation } from \"../../../utils/validation/validateLocation\";\n// import { incrementForm } from \"../../../utils/validation/incrementForm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: \"17rem\",\n    marginBottom: 30,\n  },\n}));\n\nfunction Location({\n  values,\n  handleChange,\n\n  errors,\n}) {\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const classes = useStyles();\n\n  useEffect(() => {\n    // console.log(results);\n  }, [errors]);\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      options={results}\n      onChange={(e, newValue) => {\n        // Create a new value from the user input\n        if (newValue !== null) {\n          handleChange(\"location\", newValue.name);\n          console.log(newValue);\n        } else {\n          handleChange(\"location\", \"\");\n        }\n      }}\n      getOptionLabel={(city) => city.name}\n      // TODO : Change style ...\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          onChange={(e) => {\n            e.preventDefault();\n            setSearch(e.target.value);\n            if (e.target.value.length > 2) {\n              fetchCities(e.target.value).then((response) => {\n                setResults(response);\n              });\n            } else {\n              setResults([]);\n            }\n          }}\n          className={classes.textField}\n          label={\"City\"}\n          error={errors.location ? true : false}\n          helperText={errors.location}\n        />\n      )}\n    />\n  );\n}\n\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}