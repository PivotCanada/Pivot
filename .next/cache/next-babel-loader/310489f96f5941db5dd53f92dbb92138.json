{"ast":null,"code":"import { validateEmail, isEmpty, contains } from \"../../../utils/validation/formatting\";\nexport const validateCredentials = async values => {\n  let errors = {};\n  let valid = true; //   if (isEmpty(values.email)) {\n  //     errors.email = \"Required\";\n  //     valid = false;\n  //   }\n  //   if (!isEmpty(values.email)) {\n  //     if (!validateEmail(values.email)) {\n  //       errors.email = \"This Email is Not Valid\";\n  //       valid = false;\n  //     } else {\n  //       await exists(values.email).then((response) => {\n  //         if (response.data) {\n  //           errors.email = \"This Email is Already in Use\";\n  //           valid = false;\n  //         }\n  //       });\n  //     }\n  //   }\n  //   if (contains(values.password, \" \")) {\n  //     errors.password = \"Password Cannot Contain Spaces\";\n  //     valid = false;\n  //   }\n  //   if (isEmpty(values.password)) {\n  //     errors.password = \"Required\";\n  //     valid = false;\n  //   }\n\n  if (isEmpty(values.firstname)) {\n    errors.firstname = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.lastname)) {\n    errors.lastname = \"Required\";\n    valid = false;\n  } // if (isEmpty(values.role)) {\n  //   errors.role = \"role required\";\n  //   valid = false;\n  // }\n\n\n  return {\n    errors,\n    valid\n  };\n};","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Edit/validation/validateCredentials.js"],"names":["validateEmail","isEmpty","contains","validateCredentials","values","errors","valid","firstname","lastname"],"mappings":"AAAA,SACEA,aADF,EAEEC,OAFF,EAGEC,QAHF,QAIO,sCAJP;AAMA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,MAAP,IAAkB;AACnD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,IAAZ,CAFmD,CAInD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAIL,OAAO,CAACG,MAAM,CAACG,SAAR,CAAX,EAA+B;AAC7BF,IAAAA,MAAM,CAACE,SAAP,GAAmB,UAAnB;AACAD,IAAAA,KAAK,GAAG,KAAR;AACD;;AAED,MAAIL,OAAO,CAACG,MAAM,CAACI,QAAR,CAAX,EAA8B;AAC5BH,IAAAA,MAAM,CAACG,QAAP,GAAkB,UAAlB;AACAF,IAAAA,KAAK,GAAG,KAAR;AACD,GAzCkD,CA2CnD;AACA;AACA;AACA;;;AAEA,SAAO;AAAED,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAP;AACD,CAjDM","sourcesContent":["import {\n  validateEmail,\n  isEmpty,\n  contains,\n} from \"../../../utils/validation/formatting\";\n\nexport const validateCredentials = async (values) => {\n  let errors = {};\n  let valid = true;\n\n  //   if (isEmpty(values.email)) {\n  //     errors.email = \"Required\";\n  //     valid = false;\n  //   }\n\n  //   if (!isEmpty(values.email)) {\n  //     if (!validateEmail(values.email)) {\n  //       errors.email = \"This Email is Not Valid\";\n  //       valid = false;\n  //     } else {\n  //       await exists(values.email).then((response) => {\n  //         if (response.data) {\n  //           errors.email = \"This Email is Already in Use\";\n  //           valid = false;\n  //         }\n  //       });\n  //     }\n  //   }\n\n  //   if (contains(values.password, \" \")) {\n  //     errors.password = \"Password Cannot Contain Spaces\";\n  //     valid = false;\n  //   }\n\n  //   if (isEmpty(values.password)) {\n  //     errors.password = \"Required\";\n  //     valid = false;\n  //   }\n\n  if (isEmpty(values.firstname)) {\n    errors.firstname = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.lastname)) {\n    errors.lastname = \"Required\";\n    valid = false;\n  }\n\n  // if (isEmpty(values.role)) {\n  //   errors.role = \"role required\";\n  //   valid = false;\n  // }\n\n  return { errors, valid };\n};\n"]},"metadata":{},"sourceType":"module"}