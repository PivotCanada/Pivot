{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function fetchCities(_x) {\n  return _fetchCities.apply(this, arguments);\n}\n\nfunction _fetchCities() {\n  _fetchCities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://api.teleport.org/api/cities/?search=\".concat(query), {\n              method: \"GET\"\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json().then(function (response) {\n              var cities = [];\n              var results = response[\"_embedded\"][\"city:search-results\"];\n\n              var _iterator = _createForOfIteratorHelper(results),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var result = _step.value;\n                  var city_name = result.matching_full_name;\n                  var city_href = result._links[\"city:item\"].href;\n                  var city = {\n                    name: city_name,\n                    href: city_href\n                  };\n                  cities.push(city);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              return cities;\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchCities.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/utils/location/fetchCities.js"],"names":["fetchCities","query","fetch","method","res","json","then","response","cities","results","result","city_name","matching_full_name","city_href","_links","href","city","name","push"],"mappings":";;;;;;;;;AAAA,gBAAsBA,WAAtB;AAAA;AAAA;;;0EAAO,iBAA2BC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIaC,KAAK,uDAC0BD,KAD1B,GAErB;AACEE,cAAAA,MAAM,EAAE;AADV,aAFqB,CAJlB;;AAAA;AAICC,YAAAA,GAJD;AAAA;AAAA,mBAUQA,GAAG,CAACC,IAAJ,GAAWC,IAAX,CAAgB,UAACC,QAAD,EAAc;AACzC,kBAAMC,MAAM,GAAG,EAAf;AACA,kBAAMC,OAAO,GAAGF,QAAQ,CAAC,WAAD,CAAR,CAAsB,qBAAtB,CAAhB;;AAFyC,yDAItBE,OAJsB;AAAA;;AAAA;AAIzC,oEAA4B;AAAA,sBAAnBC,MAAmB;AAC1B,sBAAMC,SAAS,GAAGD,MAAM,CAACE,kBAAzB;AACA,sBAAMC,SAAS,GAAGH,MAAM,CAACI,MAAP,CAAc,WAAd,EAA2BC,IAA7C;AAEA,sBAAMC,IAAI,GAAG;AACXC,oBAAAA,IAAI,EAAEN,SADK;AAEXI,oBAAAA,IAAI,EAAEF;AAFK,mBAAb;AAKAL,kBAAAA,MAAM,CAACU,IAAP,CAAYF,IAAZ;AACD;AAdwC;AAAA;AAAA;AAAA;AAAA;;AAezC,qBAAOR,MAAP;AACD,aAhBY,CAVR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export async function fetchCities(query) {\n  // NOTE : requests are made to the following API -> https://developers.teleport.org/api/\n  // TODO : Standardize fetch requests, with appropriate headers, etc ...\n\n  const res = await fetch(\n    `https://api.teleport.org/api/cities/?search=${query}`,\n    {\n      method: \"GET\",\n    }\n  );\n  return await res.json().then((response) => {\n    const cities = [];\n    const results = response[\"_embedded\"][\"city:search-results\"];\n\n    for (var result of results) {\n      const city_name = result.matching_full_name;\n      const city_href = result._links[\"city:item\"].href;\n\n      const city = {\n        name: city_name,\n        href: city_href,\n      };\n\n      cities.push(city);\n    }\n    return cities;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}