{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function fetchAllUsers() {\n  return _fetchAllUsers.apply(this, arguments);\n}\n\nfunction _fetchAllUsers() {\n  _fetchAllUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://pivotinfo.herokuapp.com/api/users/all\", {\n              method: \"GET\",\n              mode: \"cors\",\n              // no-cors, *cors, same-origin,\n              // headers field seems to be essential ?\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAllUsers.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Home/utils/fetchAllUsers.js"],"names":["fetchAllUsers","fetch","method","mode","headers","res","json"],"mappings":";;AAAA,gBAAsBA,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIaC,KAAK,kDAAkD;AACvEC,cAAAA,MAAM,EAAE,KAD+D;AAEvEC,cAAAA,IAAI,EAAE,MAFiE;AAEzD;AACd;AACAC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAJ8D,aAAlD,CAJlB;;AAAA;AAICC,YAAAA,GAJD;AAAA;AAAA,mBAaQA,GAAG,CAACC,IAAJ,EAbR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export async function fetchAllUsers() {\n  // NOTE : `credentials` input is an object containing user email & user password from form data\n  // TODO : Standardize fetch requests, with appropriate headers, etc ...\n\n  const res = await fetch(`https://pivotinfo.herokuapp.com/api/users/all`, {\n    method: \"GET\",\n    mode: \"cors\", // no-cors, *cors, same-origin,\n    // headers field seems to be essential ?\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  return await res.json();\n}\n"]},"metadata":{},"sourceType":"module"}