{"ast":null,"code":"var _jsxFileName = \"/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Home/Search.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { IconButton, InputAdornment } from \"@material-ui/core\";\nimport { searchUsers } from \"./utils/searchUsers\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport Link from \"next/link\";\nimport Carousel from \"./Carousel\";\nimport PreviewCard from \"./PreviewCard\";\nimport Stories from \"./Stories\";\nimport { ClickAwayListener } from \"@material-ui/core\";\nimport Chip from \"@material-ui/core/Chip\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport RoomIcon from \"@material-ui/icons/Room\";\n\nfunction Search({\n  setDisplay,\n  display\n}) {\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: results,\n    1: setResults\n  } = useState([]);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(\"location\");\n  const {\n    0: full,\n    1: setFull\n  } = useState(false); // TODO : Show close button only when there are results\n\n  const useStyles = makeStyles(theme => ({\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-start\",\n      alignItems: \"center\",\n      width: \"80vw\"\n    },\n    search: {\n      width: \"80%\",\n      fontFamily: \"Poppins, sans serif\",\n      marginBottom: 30\n    },\n    searchContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    innerWrapper: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\",\n      flexWrap: \"wrap\",\n      paddingLeft: 0,\n      \"&:hover\": {\n        opacity: 0.8,\n        cursor: \"pointer\"\n      }\n    },\n    iconButton: {\n      width: 50,\n      height: 50,\n      alignSelf: \"center\",\n      marginTop: 20,\n      marginBottom: 20\n    },\n    chip: {\n      marginRight: theme.spacing(1),\n      marginBottom: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n      fontFamily: \"Frank Ruhl Libre, serif\",\n      fontWeight: 700,\n      backgroundColor: \"#E5E5E5\",\n      \"&:hover\": {\n        opacity: 0.5,\n        cursor: \"pointer\"\n      }\n    },\n    chipArray: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      maxWidth: \"90%\",\n      marginTop: 35,\n      marginBottom: 35\n    }\n  }));\n  const classes = useStyles();\n\n  const setPlaceholder = () => {\n    if (filter === \"location\") {\n      return \"Search by Location\";\n    }\n\n    if (filter === \"industry\") {\n      return \"Seach by Industry\";\n    } else {\n      return \"search\";\n    }\n  };\n\n  useEffect(() => {\n    if (search.trim() !== \"\" && search.trim().length > 1) {\n      let input = {};\n\n      if (filter === \"location\") {\n        input = {\n          location: search\n        };\n      } else {\n        input = {\n          industry: search\n        };\n      }\n\n      searchUsers(input).then(response => {\n        console.log(response);\n        setResults(response.data);\n      });\n    } else {\n      setResults([]);\n    }\n  }, [search]); // useEffect(() => {\n  //   if (search === \"\") {\n  //     setDisplay(true);\n  //   }\n  // }, [search]);\n\n  useEffect(() => {\n    setSearch(\"\");\n    setResults([]);\n  }, [full]);\n  return __jsx(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    size: \"medium\",\n    value: search,\n    className: classes.search,\n    placeholder: setPlaceholder(),\n    id: \"input-with-icon-textfield\",\n    onClick: () => {\n      setFull(true);\n      setDisplay(false);\n    },\n    onChange: e => {\n      setSearch(e.target.value);\n      setDisplay(false);\n      setFull(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), __jsx(ButtonGroup, {\n    style: {\n      display: display ? \"none\" : \"block\"\n    },\n    color: \"primary\",\n    \"aria-label\": \"outlined secondary button group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    style: {\n      textTransform: \"none\"\n    },\n    onClick: () => setFilter(\"location\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, \"Location\"), __jsx(Button, {\n    style: {\n      textTransform: \"none\"\n    },\n    onClick: () => setFilter(\"industry\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, \"Industry\"))), full ? __jsx(IconButton, {\n    className: classes.iconButton,\n    onClick: () => {\n      setFull(false);\n      setDisplay(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, __jsx(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  })) : null, results.map(user => {\n    return __jsx(PreviewCard, {\n      display: display,\n      key: user._id,\n      story: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 16\n      }\n    });\n  }));\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Home/Search.js"],"names":["useState","useEffect","makeStyles","TextField","CloseIcon","IconButton","InputAdornment","searchUsers","Button","ButtonGroup","Link","Carousel","PreviewCard","Stories","ClickAwayListener","Chip","PublicIcon","RoomIcon","Search","setDisplay","display","search","setSearch","results","setResults","filter","setFilter","full","setFull","useStyles","theme","container","flexDirection","justifyContent","alignItems","width","fontFamily","marginBottom","searchContainer","innerWrapper","flexWrap","paddingLeft","opacity","cursor","iconButton","height","alignSelf","marginTop","chip","marginRight","spacing","paddingRight","fontWeight","backgroundColor","chipArray","maxWidth","classes","setPlaceholder","trim","length","input","location","industry","then","response","console","log","data","e","target","value","textTransform","map","user","_id"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { IconButton, InputAdornment } from \"@material-ui/core\";\nimport { searchUsers } from \"./utils/searchUsers\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport Link from \"next/link\";\nimport Carousel from \"./Carousel\";\nimport PreviewCard from \"./PreviewCard\";\nimport Stories from \"./Stories\";\nimport { ClickAwayListener } from \"@material-ui/core\";\nimport Chip from \"@material-ui/core/Chip\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport RoomIcon from \"@material-ui/icons/Room\";\n\nfunction Search({ setDisplay, display }) {\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [filter, setFilter] = useState(\"location\");\n  const [full, setFull] = useState(false);\n\n  // TODO : Show close button only when there are results\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-start\",\n      alignItems: \"center\",\n\n      width: \"80vw\",\n    },\n    search: {\n      width: \"80%\",\n      fontFamily: \"Poppins, sans serif\",\n      marginBottom: 30,\n    },\n    searchContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      width: \"100%\",\n    },\n    innerWrapper: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\",\n      flexWrap: \"wrap\",\n      paddingLeft: 0,\n      \"&:hover\": {\n        opacity: 0.8,\n        cursor: \"pointer\",\n      },\n    },\n    iconButton: {\n      width: 50,\n      height: 50,\n      alignSelf: \"center\",\n      marginTop: 20,\n      marginBottom: 20,\n    },\n    chip: {\n      marginRight: theme.spacing(1),\n      marginBottom: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n      fontFamily: \"Frank Ruhl Libre, serif\",\n      fontWeight: 700,\n      backgroundColor: \"#E5E5E5\",\n      \"&:hover\": {\n        opacity: 0.5,\n        cursor: \"pointer\",\n      },\n    },\n    chipArray: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      maxWidth: \"90%\",\n      marginTop: 35,\n      marginBottom: 35,\n    },\n  }));\n\n  const classes = useStyles();\n\n  const setPlaceholder = () => {\n    if (filter === \"location\") {\n      return \"Search by Location\";\n    }\n    if (filter === \"industry\") {\n      return \"Seach by Industry\";\n    } else {\n      return \"search\";\n    }\n  };\n\n  useEffect(() => {\n    if (search.trim() !== \"\" && search.trim().length > 1) {\n      let input = {};\n\n      if (filter === \"location\") {\n        input = { location: search };\n      } else {\n        input = { industry: search };\n      }\n\n      searchUsers(input).then((response) => {\n        console.log(response);\n        setResults(response.data);\n      });\n    } else {\n      setResults([]);\n    }\n  }, [search]);\n\n  // useEffect(() => {\n  //   if (search === \"\") {\n  //     setDisplay(true);\n  //   }\n  // }, [search]);\n\n  useEffect(() => {\n    setSearch(\"\");\n    setResults([]);\n  }, [full]);\n\n  return (\n    <div className={classes.container}>\n      {/* <ClickAwayListener\n        onClickAway={() => {\n          setFull(false);\n          setDisplay(true);\n        }}\n      > */}\n      <div className={classes.searchContainer}>\n        <TextField\n          size=\"medium\"\n          value={search}\n          className={classes.search}\n          placeholder={setPlaceholder()}\n          id=\"input-with-icon-textfield\"\n          onClick={() => {\n            setFull(true);\n            setDisplay(false);\n          }}\n          onChange={(e) => {\n            setSearch(e.target.value);\n            setDisplay(false);\n            setFull(true);\n          }}\n        />\n        <ButtonGroup\n          style={{ display: display ? \"none\" : \"block\" }}\n          color=\"primary\"\n          aria-label=\"outlined secondary button group\"\n        >\n          <Button\n            style={{ textTransform: \"none\" }}\n            onClick={() => setFilter(\"location\")}\n          >\n            Location\n          </Button>\n          <Button\n            style={{ textTransform: \"none\" }}\n            onClick={() => setFilter(\"industry\")}\n          >\n            Industry\n          </Button>\n        </ButtonGroup>\n        {/* <div className={classes.chipArray}>\n          <Chip\n            onClick={() => setFilter(\"location\")}\n            icon={<RoomIcon />}\n            label={\"Location\"}\n            disabled={filter === \"location\"}\n            className={classes.chip}\n          />\n          <Chip\n            onClick={() => setFilter(\"industry\")}\n            disabled={filter === \"industry\"}\n            label={\"Industry\"}\n            className={classes.chip}\n          />\n        </div> */}\n      </div>\n      {/* </ClickAwayListener> */}\n\n      {full ? (\n        <IconButton\n          className={classes.iconButton}\n          onClick={() => {\n            setFull(false);\n            setDisplay(true);\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n\n      {results.map((user) => {\n        return <PreviewCard display={display} key={user._id} story={user} />;\n      })}\n    </div>\n  );\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}