{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { validateEmail, isEmpty, contains } from \"../../../utils/validation/formatting\";\nexport var validateCredentials = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n    var errors, valid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            errors = {};\n            valid = true; //   if (isEmpty(values.email)) {\n            //     errors.email = \"Required\";\n            //     valid = false;\n            //   }\n            //   if (!isEmpty(values.email)) {\n            //     if (!validateEmail(values.email)) {\n            //       errors.email = \"This Email is Not Valid\";\n            //       valid = false;\n            //     } else {\n            //       await exists(values.email).then((response) => {\n            //         if (response.data) {\n            //           errors.email = \"This Email is Already in Use\";\n            //           valid = false;\n            //         }\n            //       });\n            //     }\n            //   }\n            //   if (contains(values.password, \" \")) {\n            //     errors.password = \"Password Cannot Contain Spaces\";\n            //     valid = false;\n            //   }\n            //   if (isEmpty(values.password)) {\n            //     errors.password = \"Required\";\n            //     valid = false;\n            //   }\n\n            if (isEmpty(values.firstname)) {\n              errors.firstname = \"Required\";\n              valid = false;\n            }\n\n            if (isEmpty(values.lastname)) {\n              errors.lastname = \"Required\";\n              valid = false;\n            } // if (isEmpty(values.role)) {\n            //   errors.role = \"role required\";\n            //   valid = false;\n            // }\n\n\n            return _context.abrupt(\"return\", {\n              errors: errors,\n              valid: valid\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateCredentials(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/dalyanparker/Programming/Applications/pivot-front-end/components/Edit/validation/validateCredentials.js"],"names":["validateEmail","isEmpty","contains","validateCredentials","values","errors","valid","firstname","lastname"],"mappings":";;AAAA,SACEA,aADF,EAEEC,OAFF,EAGEC,QAHF,QAIO,sCAJP;AAMA,OAAO,IAAMC,mBAAmB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,MAD6B,GACpB,EADoB;AAE7BC,YAAAA,KAF6B,GAErB,IAFqB,EAIjC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,gBAAIL,OAAO,CAACG,MAAM,CAACG,SAAR,CAAX,EAA+B;AAC7BF,cAAAA,MAAM,CAACE,SAAP,GAAmB,UAAnB;AACAD,cAAAA,KAAK,GAAG,KAAR;AACD;;AAED,gBAAIL,OAAO,CAACG,MAAM,CAACI,QAAR,CAAX,EAA8B;AAC5BH,cAAAA,MAAM,CAACG,QAAP,GAAkB,UAAlB;AACAF,cAAAA,KAAK,GAAG,KAAR;AACD,aAzCgC,CA2CjC;AACA;AACA;AACA;;;AA9CiC,6CAgD1B;AAAED,cAAAA,MAAM,EAANA,MAAF;AAAUC,cAAAA,KAAK,EAALA;AAAV,aAhD0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBH,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import {\n  validateEmail,\n  isEmpty,\n  contains,\n} from \"../../../utils/validation/formatting\";\n\nexport const validateCredentials = async (values) => {\n  let errors = {};\n  let valid = true;\n\n  //   if (isEmpty(values.email)) {\n  //     errors.email = \"Required\";\n  //     valid = false;\n  //   }\n\n  //   if (!isEmpty(values.email)) {\n  //     if (!validateEmail(values.email)) {\n  //       errors.email = \"This Email is Not Valid\";\n  //       valid = false;\n  //     } else {\n  //       await exists(values.email).then((response) => {\n  //         if (response.data) {\n  //           errors.email = \"This Email is Already in Use\";\n  //           valid = false;\n  //         }\n  //       });\n  //     }\n  //   }\n\n  //   if (contains(values.password, \" \")) {\n  //     errors.password = \"Password Cannot Contain Spaces\";\n  //     valid = false;\n  //   }\n\n  //   if (isEmpty(values.password)) {\n  //     errors.password = \"Required\";\n  //     valid = false;\n  //   }\n\n  if (isEmpty(values.firstname)) {\n    errors.firstname = \"Required\";\n    valid = false;\n  }\n\n  if (isEmpty(values.lastname)) {\n    errors.lastname = \"Required\";\n    valid = false;\n  }\n\n  // if (isEmpty(values.role)) {\n  //   errors.role = \"role required\";\n  //   valid = false;\n  // }\n\n  return { errors, valid };\n};\n"]},"metadata":{},"sourceType":"module"}